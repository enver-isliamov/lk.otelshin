
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Edit, Save, User, Package } from 'lucide-react';
import { useForm } from 'react-hook-form';
import { useToast } from '@/hooks/use-toast';
import { TireOrder } from '@/types/auth';

interface EditOrderFormData {
  client_name: string;
  phone: string;
  tire_size: string;
  tire_brand: string;
  quantity: number;
  price: number;
  status: string;
  notes?: string;
}

interface EditOrderDialogProps {
  order: TireOrder | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onOrderUpdated: () => void;
}

export const EditOrderDialog = ({ order, open, onOpenChange, onOrderUpdated }: EditOrderDialogProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  
  const form = useForm<EditOrderFormData>({
    defaultValues: {
      client_name: '',
      phone: '',
      tire_size: '',
      tire_brand: '',
      quantity: 4,
      price: 0,
      status: 'new',
      notes: ''
    }
  });

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (order && open) {
      form.reset({
        client_name: order.client_name || '',
        phone: order.phone || '',
        tire_size: order.tire_size || '',
        tire_brand: order.tire_brand || '',
        quantity: order.quantity || 4,
        price: order.price || 0,
        status: order.status || 'new',
        notes: order.notes || ''
      });
    }
  }, [order, open, form]);

  const onSubmit = async (data: EditOrderFormData) => {
    try {
      setIsLoading(true);
      console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Google Sheets:', order?.id, data);

      // –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Google Sheets
      // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Edge Function –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ Google Sheets
      
      toast({
        title: "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        description: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Google Sheets –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
        variant: "default"
      });

      console.log('‚úÖ –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets');

      onOpenChange(false);
      onOrderUpdated();

    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (!order) return null;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center">
            <Edit className="w-5 h-5 mr-2" />
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑
          </DialogTitle>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium flex items-center">
                <User className="w-4 h-4 mr-2" />
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="client_name"
                  rules={{ required: "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" }}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</FormLabel>
                      <FormControl>
                        <Input placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="phone"
                  rules={{ required: "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–¢–µ–ª–µ—Ñ–æ–Ω</FormLabel>
                      <FormControl>
                        <Input placeholder="+7-999-123-4567" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∏–Ω–∞—Ö */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium flex items-center">
                <Package className="w-4 h-4 mr-2" />
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∏–Ω–∞—Ö
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="tire_size"
                  rules={{ required: "–†–∞–∑–º–µ—Ä —à–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–†–∞–∑–º–µ—Ä —à–∏–Ω</FormLabel>
                      <FormControl>
                        <Input placeholder="195/65 R15" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="tire_brand"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ë—Ä–µ–Ω–¥ —à–∏–Ω</FormLabel>
                      <FormControl>
                        <Input placeholder="Nokian" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <FormField
                  control={form.control}
                  name="quantity"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</FormLabel>
                      <FormControl>
                        <Select value={field.value.toString()} onValueChange={(value) => field.onChange(parseInt(value))}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="2">2 —à–∏–Ω—ã</SelectItem>
                            <SelectItem value="4">4 —à–∏–Ω—ã</SelectItem>
                            <SelectItem value="6">6 —à–∏–Ω</SelectItem>
                          </SelectContent>
                        </Select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="price"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–¶–µ–Ω–∞ (‚ÇΩ)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          {...field}
                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–°—Ç–∞—Ç—É—Å</FormLabel>
                      <FormControl>
                        <Select value={field.value} onValueChange={field.onChange}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="new">–ù–æ–≤—ã–π</SelectItem>
                            <SelectItem value="processing">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</SelectItem>
                            <SelectItem value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω</SelectItem>
                          </SelectContent>
                        </Select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏—è */}
            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</FormLabel>
                  <FormControl>
                    <Input placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="flex justify-end space-x-3">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => onOpenChange(false)}
                disabled={isLoading}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button 
                type="submit" 
                disabled={isLoading}
                className="bg-blue-600 hover:bg-blue-700"
              >
                <Save className="w-4 h-4 mr-2" />
                {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};
