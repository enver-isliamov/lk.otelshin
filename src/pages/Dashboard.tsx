import React, { useState, useEffect } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { Navigate, useSearchParams } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { GoogleSheetsSync } from '@/components/GoogleSheetsSync';
import { SyncSettingsCard } from '@/components/SyncSettingsCard';
import { WebBaseManagement } from '@/components/WebBaseManagement';
import { EditOrderDialog } from '@/components/EditOrderDialog';
import { DashboardHeader } from '@/components/DashboardHeader';
import { UserProfileCard } from '@/components/UserProfileCard';
import { OrdersSection } from '@/components/OrdersSection';
import { TireOrder } from '@/types/auth';
import { OrdersService } from '@/services/ordersService';
import { supabase } from '@/integrations/supabase/client';

const Dashboard = () => {
  const { user, profile, signOut, loading, signIn } = useAuth();
  const [searchParams, setSearchParams] = useSearchParams();
  const [orders, setOrders] = useState<TireOrder[]>([]);
  const [filteredOrders, setFilteredOrders] = useState<TireOrder[]>([]);
  const [loadingOrders, setLoadingOrders] = useState(true);
  const [editingOrder, setEditingOrder] = useState<TireOrder | null>(null);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [authLoading, setAuthLoading] = useState(false);
  const { toast } = useToast();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [storageFilter, setStorageFilter] = useState('all');
  const [hasDisksFilter, setHasDisksFilter] = useState('all');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä auth –∏–∑ Telegram
  useEffect(() => {
    const authParam = searchParams.get('auth');
    
    if (authParam && !profile && !loading && !authLoading) {
      handleTelegramAuth(authParam);
    }
  }, [searchParams, profile, loading, authLoading]);

  useEffect(() => {
    if (profile) {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:', profile);
      fetchOrders();
    }
  }, [profile]);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    applyFilters();
  }, [orders, searchTerm, statusFilter, storageFilter, hasDisksFilter]);

  const fetchOrders = async () => {
    try {
      setLoadingOrders(true);
      
      console.log('üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:', profile);
      
      let result;
      
      if (profile.is_admin) {
        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
        console.log('üëë –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        result = await OrdersService.getAllOrdersForAdmin();
      } else {
        // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç—Ä–æ–≥–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ ChatID
        console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { phone: profile.phone, chatId: profile.chat_id });
        result = await OrdersService.getOrdersFromGoogleSheets(profile.phone, profile.chat_id);
      }

      if (result.error) {
        if (result.error.type === 'PHONE_CHATID_MISMATCH') {
          toast({
            title: "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞",
            description: result.error.message,
            variant: "destructive"
          });
        } else {
          toast({
            title: "–û—à–∏–±–∫–∞",
            description: result.error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã",
            variant: "destructive"
          });
        }
        setOrders([]);
      } else {
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:', result.data?.length || 0);
        setOrders(result.data || []);
      }
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤",
        variant: "destructive"
      });
    } finally {
      setLoadingOrders(false);
    }
  };

  const applyFilters = () => {
    let filtered = [...orders];

    // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(order =>
        order.client_name?.toLowerCase().includes(term) ||
        order.phone?.toLowerCase().includes(term)
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (statusFilter !== 'all') {
      filtered = filtered.filter(order => order.deal_status === statusFilter);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å–∫–ª–∞–¥—É
    if (storageFilter !== 'all') {
      filtered = filtered.filter(order => order.storage_location === storageFilter);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∏—Å–∫–∞–º
    if (hasDisksFilter !== 'all') {
      const hasDisks = hasDisksFilter === 'yes';
      filtered = filtered.filter(order => order.has_disks === hasDisks);
    }

    setFilteredOrders(filtered);
  };

  const clearFilters = () => {
    setSearchTerm('');
    setStatusFilter('all');
    setStorageFilter('all');
    setHasDisksFilter('all');
  };

  const getActiveFiltersCount = () => {
    let count = 0;
    if (searchTerm) count++;
    if (statusFilter !== 'all') count++;
    if (storageFilter !== 'all') count++;
    if (hasDisksFilter !== 'all') count++;
    return count;
  };

  const handleEditOrder = (order: TireOrder) => {
    console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑:', order);
    setEditingOrder(order);
    setEditDialogOpen(true);
  };

  const handleTelegramAuth = async (sessionId: string) => {
    console.log('üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram —Å sessionId:', sessionId);
    setAuthLoading(true);
    
    try {
      // –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä auth –∏–∑ URL
      const newSearchParams = new URLSearchParams(searchParams);
      newSearchParams.delete('auth');
      setSearchParams(newSearchParams, { replace: true });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –≤ Google Sheets
      const { data, error } = await supabase.functions.invoke('telegram-auth-check', {
        body: { sessionId }
      });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
        toast({
          title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.",
          variant: "destructive"
        });
        return;
      }
      
      if (data && data.success && data.user) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.user);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º
        const signInResult = await signIn(data.user.phone || '', data.user.chatId || '');
        
        if (!signInResult.error) {
          toast({
            title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            description: `–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ ${data.user.name}`,
          });
        } else {
          toast({
            title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
            variant: "destructive"
          });
        }
      } else {
        console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
        toast({
          title: "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞",
          description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        variant: "destructive"
      });
    } finally {
      setAuthLoading(false);
    }
  };

  const handleSignOut = async () => {
    await signOut();
    toast({
      title: "–í—ã—Ö–æ–¥",
      description: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
    });
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  if (!user || !profile) {
    return <Navigate to="/" replace />;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <DashboardHeader
        profileName={profile.name}
        profilePhone={profile.phone}
        profileChatId={profile.chat_id}
        isAdmin={profile.is_admin}
        onSignOut={handleSignOut}
      />

      <div className="container mx-auto px-4 py-8">
        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) */}
        {profile.is_admin && (
          <>
            <WebBaseManagement />
            <GoogleSheetsSync />
            <SyncSettingsCard />
          </>
        )}

        <OrdersSection
          isAdmin={profile.is_admin}
          filteredOrders={filteredOrders}
          totalOrders={orders.length}
          loadingOrders={loadingOrders}
          searchTerm={searchTerm}
          onSearchChange={setSearchTerm}
          statusFilter={statusFilter}
          onStatusFilterChange={setStatusFilter}
          storageFilter={storageFilter}
          onStorageFilterChange={setStorageFilter}
          hasDisksFilter={hasDisksFilter}
          onHasDisksFilterChange={setHasDisksFilter}
          onClearFilters={clearFilters}
          activeFiltersCount={getActiveFiltersCount()}
          onOrderCreated={fetchOrders}
          onEditOrder={handleEditOrder}
        />
      </div>

      {/* –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
      <EditOrderDialog
        order={editingOrder}
        open={editDialogOpen}
        onOpenChange={setEditDialogOpen}
        onOrderUpdated={fetchOrders}
      />
    </div>
  );
};

export default Dashboard;
