import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

console.log('üöÄ TELEGRAM BOT —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')

const BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')
const GOOGLE_SHEETS_CREDENTIALS = Deno.env.get('GOOGLE_SHEETS_CREDENTIALS') ?? ''
const GOOGLE_SHEETS_ID = Deno.env.get('GOOGLE_SHEETS_ID') ?? ''

console.log('üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã')
console.log('ü§ñ BOT_TOKEN:', BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
console.log('üìä GOOGLE_SHEETS_ID:', GOOGLE_SHEETS_ID ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
console.log('üîë GOOGLE_SHEETS_CREDENTIALS:', GOOGLE_SHEETS_CREDENTIALS ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Google Access Token
async function getGoogleAccessToken() {
  try {
    console.log('üîê –ü–æ–ª—É—á–µ–Ω–∏–µ Google Access Token...')
    
    if (!GOOGLE_SHEETS_CREDENTIALS) {
      throw new Error('GOOGLE_SHEETS_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }

    const credentials = JSON.parse(GOOGLE_SHEETS_CREDENTIALS)
    
    const header = {
      alg: 'RS256',
      typ: 'JWT'
    }

    const now = Math.floor(Date.now() / 1000)
    const payload = {
      iss: credentials.client_email,
      scope: 'https://www.googleapis.com/auth/spreadsheets',
      aud: 'https://oauth2.googleapis.com/token',
      exp: now + 3600,
      iat: now
    }

    let privateKey = credentials.private_key.replace(/\\n/g, '\n')
    
    const pemHeader = '-----BEGIN PRIVATE KEY-----'
    const pemFooter = '-----END PRIVATE KEY-----'
    const pemContents = privateKey
      .replace(pemHeader, '')
      .replace(pemFooter, '')
      .replace(/\s/g, '')
    
    const binaryData = Uint8Array.from(atob(pemContents), c => c.charCodeAt(0))
    
    const keyData = await crypto.subtle.importKey(
      'pkcs8',
      binaryData,
      {
        name: 'RSASSA-PKCS1-v1_5',
        hash: 'SHA-256',
      },
      false,
      ['sign']
    )

    const headerBase64 = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_')
    const payloadBase64 = btoa(JSON.stringify(payload)).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_')
    const unsignedToken = `${headerBase64}.${payloadBase64}`

    const signature = await crypto.subtle.sign(
      'RSASSA-PKCS1-v1_5',
      keyData,
      new TextEncoder().encode(unsignedToken)
    )

    const signatureBase64 = btoa(String.fromCharCode(...new Uint8Array(signature)))
      .replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_')
    
    const jwt = `${unsignedToken}.${signatureBase64}`

    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
        assertion: jwt
      })
    })

    const tokenData = await tokenResponse.json()
    
    if (!tokenResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: ${tokenData.error_description || tokenData.error}`)
    }

    console.log('‚úÖ Access token –ø–æ–ª—É—á–µ–Ω')
    return tokenData.access_token

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è access token:', error)
    throw error
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è 20 —Å—Ç–æ–ª–±—Ü–æ–≤)
async function checkUserInWebBase(chatId: string, userName: string) {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase:', { chatId, userName })
    
    const accessToken = await getGoogleAccessToken()
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ WebBase (A-T, 20 —Å—Ç–æ–ª–±—Ü–æ–≤)
    const response = await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_ID}/values/WebBase!A:T`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      }
    )

    if (!response.ok) {
      console.log('‚ö†Ô∏è WebBase –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π')
      return null
    }

    const data = await response.json()
    const rows = data.values || []
    
    if (rows.length <= 1) {
      console.log('üìã WebBase –ø—É—Å—Ç')
      return null
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Chat ID (–∫–æ–ª–æ–Ω–∫–∞ A)
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i]
      const rowChatId = row[0] // –ö–æ–ª–æ–Ω–∫–∞ A - Chat ID
      
      if (rowChatId === chatId) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ WebBase:', row)
        return {
          rowIndex: i + 1,
          chatId: row[0] || chatId, // A - Chat ID
          name: row[1] || userName, // B - –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
          phone: row[2] || '', // C - –¢–µ–ª–µ—Ñ–æ–Ω
          carNumber: row[3] || '', // D - –ù–æ–º–µ—Ä –ê–≤—Ç–æ
          order: row[4] || '', // E - –ó–∞–∫–∞–∑ - QR
          monthlyPrice: row[5] || '', // F - –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü
          tireCount: row[6] || '', // G - –ö–æ–ª-–≤–æ —à–∏–Ω
          hasRims: row[7] || '', // H - –ù–∞–ª–∏—á–∏–µ –¥–∏—Å–∫–æ–≤
          startDate: row[8] || '', // I - –ù–∞—á–∞–ª–æ
          term: row[9] || '', // J - –°—Ä–æ–∫
          reminder: row[10] || '', // K - –ù–∞–ø–æ–º–Ω–∏—Ç—å
          endDate: row[11] || '', // L - –û–∫–æ–Ω—á–∞–Ω–∏–µ
          storage: row[12] || '', // M - –°–∫–ª–∞–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è
          cell: row[13] || '', // N - –Ø—á–µ–π–∫–∞
          totalSum: row[14] || '', // O - –û–±—â–∞—è —Å—É–º–º–∞
          debt: row[15] || '', // P - –î–æ–ª–≥
          contract: row[16] || '', // Q - –î–æ–≥–æ–≤–æ—Ä
          // –ù–µ –≤–∫–ª—é—á–∞–µ–º R, S, T (–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞, —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏, –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞)
          isAdmin: false // –ê–¥–º–∏–Ω —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        }
      }
    }
    
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WebBase')
    return null
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase:', error)
    return null
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è 20 —Å—Ç–æ–ª–±—Ü–æ–≤)
async function addUserToWebBase(chatId: string, userName: string) {
  try {
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase:', { chatId, userName })
    
    const accessToken = await getGoogleAccessToken()
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ WebBase: A-Chat ID, B-–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞, C-–¢–µ–ª–µ—Ñ–æ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ
    const values = [[
      chatId, // A - Chat ID
      userName, // B - –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
      '', // C - –¢–µ–ª–µ—Ñ–æ–Ω (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞)
      '', // D - –ù–æ–º–µ—Ä –ê–≤—Ç–æ
      '', // E - –ó–∞–∫–∞–∑ - QR
      '', // F - –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü
      '', // G - –ö–æ–ª-–≤–æ —à–∏–Ω
      '', // H - –ù–∞–ª–∏—á–∏–µ –¥–∏—Å–∫–æ–≤
      '', // I - –ù–∞—á–∞–ª–æ
      '', // J - –°—Ä–æ–∫
      '', // K - –ù–∞–ø–æ–º–Ω–∏—Ç—å
      '', // L - –û–∫–æ–Ω—á–∞–Ω–∏–µ
      '', // M - –°–∫–ª–∞–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è
      '', // N - –Ø—á–µ–π–∫–∞
      '', // O - –û–±—â–∞—è —Å—É–º–º–∞
      '', // P - –î–æ–ª–≥
      '', // Q - –î–æ–≥–æ–≤–æ—Ä
      '', // R - –ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
      '', // S - –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
      '' // T - –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
    ]]

    const appendResponse = await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_ID}/values/WebBase!A:T:append?valueInputOption=RAW`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ values })
      }
    )

    if (!appendResponse.ok) {
      const error = await appendResponse.text()
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ WebBase: ${error}`)
    }

    const result = await appendResponse.json()
    const addedRowIndex = result.updates?.updatedRange?.match(/(\d+)$/)?.[1]
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ WebBase, —Å—Ç—Ä–æ–∫–∞:', addedRowIndex)
    
    // –í—ã–¥–µ–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ü–≤–µ—Ç–æ–º
    if (addedRowIndex) {
      await highlightNewRow(accessToken, parseInt(addedRowIndex))
    }
    
    return parseInt(addedRowIndex) || null

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase:', error)
    throw error
  }
}

// –í—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ü–≤–µ—Ç–æ–º
async function highlightNewRow(accessToken: string, rowIndex: number) {
  try {
    console.log('üé® –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ü–≤–µ—Ç–æ–º:', rowIndex)
    
    const formatResponse = await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_ID}:batchUpdate`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          requests: [{
            repeatCell: {
              range: {
                sheetId: 0, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ WebBase - –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                startRowIndex: rowIndex - 1,
                endRowIndex: rowIndex,
                startColumnIndex: 0,
                endColumnIndex: 20 // –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ 20 —Å—Ç–æ–ª–±—Ü–æ–≤ (A-T)
              },
              cell: {
                userEnteredFormat: {
                  backgroundColor: {
                    red: 0.9,
                    green: 1.0,
                    blue: 0.9,
                    alpha: 1.0
                  }
                }
              },
              fields: 'userEnteredFormat.backgroundColor'
            }
          }]
        })
      }
    )
    
    if (formatResponse.ok) {
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∞ —Ü–≤–µ—Ç–æ–º')
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Ü–≤–µ—Ç–æ–º')
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:', error)
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Sheets
async function saveAuthSession(sessionId: string, chatId: string, userName: string) {
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', { sessionId, chatId, userName })
    
    const accessToken = await getGoogleAccessToken()
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ telegram_sessions')
      
      // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const addSheetResponse = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_ID}:batchUpdate`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            requests: [{
              addSheet: {
                properties: {
                  title: 'telegram_sessions'
                }
              }
            }]
          })
        }
      )
      
      if (addSheetResponse.ok) {
        console.log('‚úÖ –õ–∏—Å—Ç telegram_sessions —Å–æ–∑–¥–∞–Ω')
      } else {
        console.log('üìã –õ–∏—Å—Ç telegram_sessions —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }
    } catch (sheetError) {
      console.log('üìã –õ–∏—Å—Ç telegram_sessions —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', sheetError.message)
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const headerValues = [['SessionID', 'ChatID', 'UserName', 'Phone', 'Authorized', 'Timestamp']]
    
    await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_ID}/values/telegram_sessions!A1:F1?valueInputOption=RAW`,
      {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ values: headerValues })
      }
    )
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const values = [[
      sessionId,
      chatId,
      userName,
      '',  // —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π
      'true',  // –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      new Date().toISOString() // –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    ]]

    const appendResponse = await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_ID}/values/telegram_sessions!A:F:append?valueInputOption=RAW`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ values })
      }
    )

    if (!appendResponse.ok) {
      const error = await appendResponse.text()
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: ${error}`)
    }

    console.log('‚úÖ –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
    throw error
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId: string, message: string) {
  try {
    if (!BOT_TOKEN) {
      throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }

    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown'
      })
    })

    if (!response.ok) {
      const error = await response.text()
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`)
    }

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error)
  }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—Ç–∞ (Web App –∫–Ω–æ–ø–∫–∞)
async function setMenuButton(chatId: string) {
  try {
    if (!BOT_TOKEN) {
      throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è Web App –∫–Ω–æ–ø–∫–∏
    const sessionId = `telegram_${chatId}_${Date.now()}`
    const authUrl = `https://id-preview--86de7c90-bfa2-4ea9-b1d2-216984f4b59d.lovable.app/dashboard?auth=${sessionId}`
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ Google Sheets
    await saveAuthSession(sessionId, chatId, 'WebApp')

    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setChatMenuButton`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        menu_button: {
          type: 'web_app',
          text: '–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç',
          web_app: {
            url: authUrl
          }
        }
      })
    })

    if (!response.ok) {
      const error = await response.text()
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–Ω–æ–ø–∫–∏:', error)
    } else {
      console.log('‚úÖ –ú–µ–Ω—é –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chatId)
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–Ω–æ–ø–∫–∏:', error)
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
async function createAuthSession(chatId: string, userName: string) {
  try {
    const sessionId = `telegram_${chatId}_${Date.now()}`
    console.log('üîë –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é:', sessionId)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ Google Sheets
    await saveAuthSession(sessionId, chatId, userName)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authUrl = `https://id-preview--86de7c90-bfa2-4ea9-b1d2-216984f4b59d.lovable.app/dashboard?auth=${sessionId}`
    return authUrl
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏:', error)
    throw error
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram
async function sendTelegramMessageWithKeyboard(chatId: string, message: string, keyboard: any, parseMode: string = 'Markdown') {
  try {
    if (!BOT_TOKEN) {
      throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }

    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: parseMode,
        reply_markup: keyboard
      })
    })

    if (!response.ok) {
      const error = await response.text()
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: ${error}`)
    }

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram:', error)
  }
}

// –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function requestContactInfo(chatId: string, message: string) {
  try {
    if (!BOT_TOKEN) {
      throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }

    const keyboard = {
      keyboard: [[
        {
          text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
          request_contact: true
        }
      ]],
      one_time_keyboard: true,
      resize_keyboard: true
    }

    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    })

    if (!response.ok) {
      const error = await response.text()
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${error}`)
    }

    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Telegram:', error)
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è 20 —Å—Ç–æ–ª–±—Ü–æ–≤)
async function updateUserInWebBase(chatId: string, phone: string, name: string) {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase:', { chatId, phone, name })
    
    const accessToken = await getGoogleAccessToken()
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ WebBase (A-T, 20 —Å—Ç–æ–ª–±—Ü–æ–≤)
    const response = await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_ID}/values/WebBase!A:T`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      }
    )

    if (!response.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ WebBase')
    }

    const data = await response.json()
    const rows = data.values || []
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Chat ID (–∫–æ–ª–æ–Ω–∫–∞ A)
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i]
      const rowChatId = row[0] // –ö–æ–ª–æ–Ω–∫–∞ A - Chat ID
      
      if (rowChatId === chatId) {
        console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å—Ç—Ä–æ–∫–∞:', i + 1)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∏–º—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        const updateValues = [[
          chatId, // A - Chat ID (–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
          name || row[1] || '', // B - –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
          phone || row[2] || '', // C - –¢–µ–ª–µ—Ñ–æ–Ω (–≥–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
          row[3] || '', // D - –ù–æ–º–µ—Ä –ê–≤—Ç–æ
          row[4] || '', // E - –ó–∞–∫–∞–∑ - QR
          row[5] || '', // F - –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü
          row[6] || '', // G - –ö–æ–ª-–≤–æ —à–∏–Ω
          row[7] || '', // H - –ù–∞–ª–∏—á–∏–µ –¥–∏—Å–∫–æ–≤
          row[8] || '', // I - –ù–∞—á–∞–ª–æ
          row[9] || '', // J - –°—Ä–æ–∫
          row[10] || '', // K - –ù–∞–ø–æ–º–Ω–∏—Ç—å
          row[11] || '', // L - –û–∫–æ–Ω—á–∞–Ω–∏–µ
          row[12] || '', // M - –°–∫–ª–∞–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è
          row[13] || '', // N - –Ø—á–µ–π–∫–∞
          row[14] || '', // O - –û–±—â–∞—è —Å—É–º–º–∞
          row[15] || '', // P - –î–æ–ª–≥
          row[16] || '', // Q - –î–æ–≥–æ–≤–æ—Ä
          row[17] || '', // R - –ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
          row[18] || '', // S - –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
          row[19] || '' // T - –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
        ]]

        const updateResponse = await fetch(
          `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_ID}/values/WebBase!A${i + 1}:T${i + 1}?valueInputOption=RAW`,
          {
            method: 'PUT',
            headers: {
              'Authorization': `Bearer ${accessToken}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ values: updateValues })
          }
        )

        if (!updateResponse.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase')
        }

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ WebBase')
        return true
      }
    }
    
    return false
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase:', error)
    throw error
  }
}

serve(async (req) => {
  console.log('\nü§ñ === TELEGRAM BOT WEBHOOK ===')
  console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toISOString())
  console.log('üîó URL –∑–∞–ø—Ä–æ—Å–∞:', req.url)
  console.log('üì° –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', req.method)

  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const body = await req.text()
    console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram:', body)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
    if (!body || body.trim() === '') {
      console.log('‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞')
      return new Response('OK', { headers: corsHeaders })
    }
    
    let parsedBody
    try {
      parsedBody = JSON.parse(body)
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError)
      console.error('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–ª–∞:', body)
      return new Response('OK', { headers: corsHeaders }) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK –¥–ª—è Telegram
    }

    const message = parsedBody?.message
    const contact = message?.contact
    
    if (!message) {
      console.log('üìÑ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ')
      return new Response('OK', { headers: corsHeaders })
    }

    const chatId = message.chat?.id?.toString()
    const text = message.text
    const userName = message.from?.first_name || message.from?.username || 'Unknown'
    
    console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { chatId, text, userName, contact: !!contact })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if (contact) {
      console.log('üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', contact)
      const phoneNumber = contact.phone_number
      const contactName = contact.first_name || contact.last_name || userName
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase
        await updateUserInWebBase(chatId, phoneNumber, contactName)
        
        // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        const authUrl = await createAuthSession(chatId, contactName)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        const confirmMessage = `‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:

üë§ –ò–º—è: ${contactName}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}
üÜî –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: \`${chatId}\`

üè† –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!`

        const keyboard = {
          inline_keyboard: [
            [
              {
                text: "üè† –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç",
                url: authUrl
              }
            ],
            [
              {
                text: "üåê –°–∞–π—Ç",
                url: "https://id-preview--86de7c90-bfa2-4ea9-b1d2-216984f4b59d.lovable.app/"
              },
              {
                text: "üìÑ –î–æ–≥–æ–≤–æ—Ä",
                url: "https://id-preview--86de7c90-bfa2-4ea9-b1d2-216984f4b59d.lovable.app/contract"
              }
            ]
          ]
        }

        await sendTelegramMessageWithKeyboard(chatId, confirmMessage, keyboard)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web App –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –õ–ö
        await setMenuButton(chatId)
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error)
        await sendTelegramMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      }
      
      return new Response('OK', { headers: corsHeaders })
    }
    
    console.log('üí¨ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { chatId, text, userName })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å sessionId
    if (text?.startsWith('/start ')) {
      const sessionId = text.replace('/start ', '').trim()
      console.log('üîë –ü–æ–ª—É—á–µ–Ω sessionId –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start:', sessionId)
      console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { chatId, userName, userId: message.from?.id })
      
      if (sessionId && sessionId !== '/start' && sessionId.length > 5) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è sessionId —É—Å–ø–µ—à–Ω–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è:', sessionId)
        
        try {
          console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Sheets...')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase
          const existingUser = await checkUserInWebBase(chatId, userName)
          
          if (existingUser) {
            console.log('üë§ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ WebBase')
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await saveAuthSession(sessionId, chatId, userName)
            
            // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            const authUrl = await createAuthSession(chatId, userName)
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            let userInfoMessage = `‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${existingUser.name}!

üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
üÜî –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: \`${existingUser.chatId}\``

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–æ–ª—è
            if (existingUser.phone) userInfoMessage += `\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${existingUser.phone}`
            if (existingUser.carNumber) userInfoMessage += `\nüöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: ${existingUser.carNumber}`
            if (existingUser.order) userInfoMessage += `\nüì¶ –ó–∞–∫–∞–∑: ${existingUser.order}`
            if (existingUser.monthlyPrice) userInfoMessage += `\nüí∞ –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: ${existingUser.monthlyPrice}`
            if (existingUser.tireCount) userInfoMessage += `\nüî¢ –ö–æ–ª-–≤–æ —à–∏–Ω: ${existingUser.tireCount}`
            if (existingUser.hasRims) userInfoMessage += `\nüíø –î–∏—Å–∫–∏: ${existingUser.hasRims}`
            if (existingUser.startDate) userInfoMessage += `\nüìÖ –ù–∞—á–∞–ª–æ: ${existingUser.startDate}`
            if (existingUser.term) userInfoMessage += `\n‚è±Ô∏è –°—Ä–æ–∫: ${existingUser.term}`
            if (existingUser.endDate) userInfoMessage += `\nüìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${existingUser.endDate}`
            if (existingUser.storage) userInfoMessage += `\nüè≠ –°–∫–ª–∞–¥: ${existingUser.storage}`
            if (existingUser.cell) userInfoMessage += `\nüìç –Ø—á–µ–π–∫–∞: ${existingUser.cell}`
            if (existingUser.totalSum) userInfoMessage += `\nüíµ –û–±—â–∞—è —Å—É–º–º–∞: ${existingUser.totalSum}`
            if (existingUser.debt) userInfoMessage += `\n‚ö†Ô∏è –î–æ–ª–≥: ${existingUser.debt}`
            if (existingUser.contract) userInfoMessage += `\nüìã –î–æ–≥–æ–≤–æ—Ä: ${existingUser.contract}`

            userInfoMessage += `\n\nüåê –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`

            const keyboard = {
              inline_keyboard: [
                [
                  {
                    text: "üè† –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç",
                    url: authUrl
                  }
                ],
                [
                  {
                    text: "üåê –°–∞–π—Ç",
                    url: "https://id-preview--86de7c90-bfa2-4ea9-b1d2-216984f4b59d.lovable.app/"
                  },
                  {
                    text: "üìÑ –î–æ–≥–æ–≤–æ—Ä",
                    url: "https://id-preview--86de7c90-bfa2-4ea9-b1d2-216984f4b59d.lovable.app/contract"
                  }
                ]
              ]
            }

            await sendTelegramMessageWithKeyboard(chatId, userInfoMessage, keyboard)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web App –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –õ–ö
            await setMenuButton(chatId)
            
          } else {
            console.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º –≤ WebBase')
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase
            await addUserToWebBase(chatId, userName)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await saveAuthSession(sessionId, chatId, userName)
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const authUrl = await createAuthSession(chatId, userName)
            
            const newUserMessage = `üéâ <span style="color: #007bff;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –û—Ç–µ–ª—å–®–∏–Ω!</span>

‚úÖ <span style="color: #007bff;">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</span>
üë§ –ò–º—è: <span style="color: #007bff;">${userName}</span>
üÜî –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: <span style="color: #007bff;">\`${chatId}\`</span>

üåê <span style="color: #007bff;">–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!</span>`

            const keyboard = {
              inline_keyboard: [
                [
                  {
                    text: "üè† –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç",
                    url: authUrl
                  }
                ],
                [
                  {
                    text: "üåê –°–∞–π—Ç",
                    url: "https://id-preview--86de7c90-bfa2-4ea9-b1d2-216984f4b59d.lovable.app/"
                  },
                  {
                    text: "üìÑ –î–æ–≥–æ–≤–æ—Ä",
                    url: "https://id-preview--86de7c90-bfa2-4ea9-b1d2-216984f4b59d.lovable.app/contract"
                  }
                ]
              ]
            }

            await sendTelegramMessageWithKeyboard(chatId, newUserMessage, keyboard, 'HTML')
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web App –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –õ–ö
            await setMenuButton(chatId)
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
            const installMessage = `üì± *–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω!*

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üîÑ *–£–¥–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåü –î–æ–±–∞–≤—å—Ç–µ –û—Ç–µ–ª—å–®–∏–Ω –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ üì± **iPhone/iPad:**                ‚îÉ
‚îÉ 1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –≤ Safari           ‚îÉ
‚îÉ 2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" ‚¨ÜÔ∏è    ‚îÉ
‚îÉ 3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞ —ç–∫—Ä–∞–Ω –î–æ–º–æ–π" üè†     ‚îÉ
‚îÉ 4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" ‚úÖ            ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ ü§ñ **Android:**                   ‚îÉ
‚îÉ 1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –≤ Chrome           ‚îÉ
‚îÉ 2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –º–µ–Ω—é (‚ãÆ) –≤ –ø—Ä–∞–≤–æ–º —É–≥–ª—É   ‚îÉ
‚îÉ 3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω" üè†  ‚îÉ
‚îÉ 4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" ‚úÖ            ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

üéâ **–ì–æ—Ç–æ–≤–æ!** –û—Ç–µ–ª—å–®–∏–Ω –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ!

üí° *–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É - –≤ –æ–¥–∏–Ω –∫–ª–∏–∫!*`

            setTimeout(() => {
              sendTelegramMessage(chatId, installMessage)
            }, 2000)
          }
          
          console.log('üéâ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê –¥–ª—è sessionId:', sessionId)
          
        } catch (authError) {
          console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
            error: authError.message,
            stack: authError.stack,
            sessionId,
            chatId,
            userName
          })
          await sendTelegramMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        }
        
        return new Response('OK', { headers: corsHeaders })
      } else {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π sessionId:', sessionId)
        await sendTelegramMessage(chatId, '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å —Å–∞–π—Ç–∞.')
      }
    }

    // –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (text === '/start') {
      console.log('üìã –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase
      const existingUser = await checkUserInWebBase(chatId, userName)
      
      if (existingUser) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        const missingPhone = !existingUser.phone || existingUser.phone.trim() === ''
        const missingName = !existingUser.name || existingUser.name.trim() === '' || existingUser.name === 'Unknown'
        
        if (missingPhone) {
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          const requestMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${existingUser.name || userName}!

üì± –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:`

          await requestContactInfo(chatId, requestMessage)
        } else {
          // –ï—Å—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
          const authUrl = await createAuthSession(chatId, existingUser.name)
          
          let userInfoMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${existingUser.name}!

üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
üÜî –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: \`${existingUser.chatId}\``

          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–æ–ª—è
          if (existingUser.phone) userInfoMessage += `\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${existingUser.phone}`
          if (existingUser.carNumber) userInfoMessage += `\nüöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: ${existingUser.carNumber}`
          if (existingUser.order) userInfoMessage += `\nüì¶ –ó–∞–∫–∞–∑: ${existingUser.order}`
          if (existingUser.monthlyPrice) userInfoMessage += `\nüí∞ –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: ${existingUser.monthlyPrice}`
          if (existingUser.tireCount) userInfoMessage += `\nüî¢ –ö–æ–ª-–≤–æ —à–∏–Ω: ${existingUser.tireCount}`
          if (existingUser.hasRims) userInfoMessage += `\nüíø –î–∏—Å–∫–∏: ${existingUser.hasRims}`
          if (existingUser.startDate) userInfoMessage += `\nüìÖ –ù–∞—á–∞–ª–æ: ${existingUser.startDate}`
          if (existingUser.term) userInfoMessage += `\n‚è±Ô∏è –°—Ä–æ–∫: ${existingUser.term}`
          if (existingUser.endDate) userInfoMessage += `\nüìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${existingUser.endDate}`
          if (existingUser.storage) userInfoMessage += `\nüè≠ –°–∫–ª–∞–¥: ${existingUser.storage}`
          if (existingUser.cell) userInfoMessage += `\nüìç –Ø—á–µ–π–∫–∞: ${existingUser.cell}`
          if (existingUser.totalSum) userInfoMessage += `\nüíµ –û–±—â–∞—è —Å—É–º–º–∞: ${existingUser.totalSum}`
          if (existingUser.debt) userInfoMessage += `\n‚ö†Ô∏è –î–æ–ª–≥: ${existingUser.debt}`
          if (existingUser.contract) userInfoMessage += `\nüìã –î–æ–≥–æ–≤–æ—Ä: ${existingUser.contract}`

          const keyboard = {
            inline_keyboard: [
              [
                {
                  text: "üè† –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç",
                  url: authUrl
                }
              ],
              [
                {
                  text: "üåê –°–∞–π—Ç",
                  url: "https://id-preview--86de7c90-bfa2-4ea9-b1d2-216984f4b59d.lovable.app/"
                },
                {
                  text: "üìÑ –î–æ–≥–æ–≤–æ—Ä",
                  url: "https://id-preview--86de7c90-bfa2-4ea9-b1d2-216984f4b59d.lovable.app/contract"
                }
              ]
            ]
          }

          await sendTelegramMessageWithKeyboard(chatId, userInfoMessage, keyboard)
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web App –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –õ–ö
          await setMenuButton(chatId)
        }
      } else {
        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WebBase
        console.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ WebBase –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç')
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebBase
        await addUserToWebBase(chatId, userName)
        
        const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –û—Ç–µ–ª—å–®–∏–Ω!

‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!
üë§ –ò–º—è: ${userName}
üÜî –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: \`${chatId}\`

üì± –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:`

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await sendTelegramMessage(chatId, welcomeMessage)
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        setTimeout(async () => {
          await requestContactInfo(chatId, `üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:`)
        }, 1000)
      }
      
      return new Response('OK', { headers: corsHeaders })
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('üìù –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text)
    
    try {
      const helpMessage = `ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @EnrikeTomas

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`

      await sendTelegramMessage(chatId, helpMessage)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    }
    
    return new Response('OK', { headers: corsHeaders })

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ Telegram Bot:')
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    console.error('üìç Stack trace:', error.stack)
    
    return new Response('Internal Server Error', { 
      status: 500, 
      headers: corsHeaders 
    })
  }
})