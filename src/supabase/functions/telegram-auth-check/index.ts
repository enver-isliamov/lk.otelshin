import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

console.log('üîê TELEGRAM AUTH CHECK —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞')

const GOOGLE_SHEETS_CREDENTIALS = Deno.env.get('GOOGLE_SHEETS_CREDENTIALS') ?? ''
const GOOGLE_SHEETS_ID = Deno.env.get('GOOGLE_SHEETS_ID') ?? ''

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Google Access Token
async function getGoogleAccessToken() {
  try {
    console.log('üîê –ü–æ–ª—É—á–µ–Ω–∏–µ Google Access Token...')
    
    if (!GOOGLE_SHEETS_CREDENTIALS) {
      throw new Error('GOOGLE_SHEETS_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }

    const credentials = JSON.parse(GOOGLE_SHEETS_CREDENTIALS)
    
    const header = {
      alg: 'RS256',
      typ: 'JWT'
    }

    const now = Math.floor(Date.now() / 1000)
    const payload = {
      iss: credentials.client_email,
      scope: 'https://www.googleapis.com/auth/spreadsheets',
      aud: 'https://oauth2.googleapis.com/token',
      exp: now + 3600,
      iat: now
    }

    let privateKey = credentials.private_key.replace(/\\n/g, '\n')
    
    const pemHeader = '-----BEGIN PRIVATE KEY-----'
    const pemFooter = '-----END PRIVATE KEY-----'
    const pemContents = privateKey
      .replace(pemHeader, '')
      .replace(pemFooter, '')
      .replace(/\s/g, '')
    
    const binaryData = Uint8Array.from(atob(pemContents), c => c.charCodeAt(0))
    
    const keyData = await crypto.subtle.importKey(
      'pkcs8',
      binaryData,
      {
        name: 'RSASSA-PKCS1-v1_5',
        hash: 'SHA-256',
      },
      false,
      ['sign']
    )

    const headerBase64 = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_')
    const payloadBase64 = btoa(JSON.stringify(payload)).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_')
    const unsignedToken = `${headerBase64}.${payloadBase64}`

    const signature = await crypto.subtle.sign(
      'RSASSA-PKCS1-v1_5',
      keyData,
      new TextEncoder().encode(unsignedToken)
    )

    const signatureBase64 = btoa(String.fromCharCode(...new Uint8Array(signature)))
      .replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_')
    
    const jwt = `${unsignedToken}.${signatureBase64}`

    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
        assertion: jwt
      })
    })

    const tokenData = await tokenResponse.json()
    
    if (!tokenResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: ${tokenData.error_description || tokenData.error}`)
    }

    console.log('‚úÖ Access token –ø–æ–ª—É—á–µ–Ω')
    return tokenData.access_token

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è access token:', error)
    throw error
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Sheets
async function checkAuthSession(sessionId: string) {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', sessionId)
    
    const accessToken = await getGoogleAccessToken()
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ telegram_sessions
    const response = await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_ID}/values/telegram_sessions!A:F`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      }
    )

    if (!response.ok) {
      console.log('‚ö†Ô∏è –õ–∏—Å—Ç telegram_sessions –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π')
      return null
    }

    const data = await response.json()
    const rows = data.values || []
    
    if (rows.length <= 1) {
      console.log('üìã –õ–∏—Å—Ç telegram_sessions –ø—É—Å—Ç')
      return null
    }

    // –ò—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ SessionID (–∫–æ–ª–æ–Ω–∫–∞ A)
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i]
      const rowSessionId = row[0] // –ö–æ–ª–æ–Ω–∫–∞ A - SessionID
      
      if (rowSessionId === sessionId) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è:', row)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞
        const isAuthorized = row[4] === 'true' // –ö–æ–ª–æ–Ω–∫–∞ E - Authorized
        
        if (!isAuthorized) {
          console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞')
          return null
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WebBase –ø–æ ChatID
        const chatId = row[1] // –ö–æ–ª–æ–Ω–∫–∞ B - ChatID
        const user = await getUserFromWebBase(chatId, accessToken)
        
        return user
      }
    }
    
    console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    return null
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
    return null
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WebBase
async function getUserFromWebBase(chatId: string, accessToken: string) {
  try {
    console.log('üë§ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WebBase:', chatId)
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ WebBase
    const response = await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_ID}/values/WebBase!A:H`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      }
    )

    if (!response.ok) {
      console.log('‚ö†Ô∏è WebBase –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return null
    }

    const data = await response.json()
    const rows = data.values || []
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Chat ID (–∫–æ–ª–æ–Ω–∫–∞ A)
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i]
      const rowChatId = row[0] // –ö–æ–ª–æ–Ω–∫–∞ A - Chat ID
      
      if (rowChatId === chatId) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ WebBase')
        return {
          chatId: row[0] || '', // –ö–æ–ª–æ–Ω–∫–∞ A - Chat ID
          name: row[1] || '', // –ö–æ–ª–æ–Ω–∫–∞ B - –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
          phone: row[2] || '', // –ö–æ–ª–æ–Ω–∫–∞ C - –¢–µ–ª–µ—Ñ–æ–Ω
          address: row[3] || '', // –ö–æ–ª–æ–Ω–∫–∞ D - –ê–¥—Ä–µ—Å
          carNumber: row[4] || '', // –ö–æ–ª–æ–Ω–∫–∞ E - –ù–æ–º–µ—Ä –∞–≤—Ç–æ
          order: row[5] || '', // –ö–æ–ª–æ–Ω–∫–∞ F - –ó–∞–∫–∞–∑
          deadline: row[6] || '', // –ö–æ–ª–æ–Ω–∫–∞ G - –°—Ä–æ–∫–∏
          isAdmin: row[7] === 'TRUE' || false // –ö–æ–ª–æ–Ω–∫–∞ H - –ê–¥–º–∏–Ω
        }
      }
    }
    
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WebBase')
    return null
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WebBase:', error)
    return null
  }
}

serve(async (req) => {
  console.log('\nüîê === TELEGRAM AUTH CHECK ===')
  console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toISOString())

  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { sessionId } = await req.json()
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏:', sessionId)
    
    if (!sessionId) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'SessionID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' 
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const user = await checkAuthSession(sessionId)
    
    if (user) {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name)
      return new Response(
        JSON.stringify({ 
          success: true, 
          user: user 
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    } else {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ telegram-auth-check:', error)
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})