
import { supabase } from '@/integrations/supabase/client';
import { WebBaseRecord } from '@/types/auth';
import { createPhoneVariants } from '@/utils/phoneUtils';

export class WebbaseService {
  // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  static async getAllRecords(): Promise<{ data: WebBaseRecord[] | null; error: any }> {
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ WebBase...');
    const { data, error } = await supabase
      .from('webbase')
      .select('*');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ WebBase:', error);
    } else {
      console.log('üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ WebBase:', data?.length);
      console.log('üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ WebBase:', data);
    }

    return { data: data as WebBaseRecord[] | null, error };
  }

  // –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ Chat ID
  static async findByPhoneAndChatId(phone: string, chatId: string): Promise<WebBaseRecord | null> {
    const phoneVariants = createPhoneVariants(phone);
    
    for (const phoneVariant of phoneVariants) {
      console.log('üîç –ü–æ–∏—Å–∫ –≤ WebBase –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:', phoneVariant, '–∏ Chat ID:', chatId);
      
      const { data, error } = await supabase
        .from('webbase')
        .select('*')
        .eq('phone', phoneVariant)
        .eq('chat_id', chatId);

      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ WebBase –¥–ª—è', phoneVariant, ':', data, '–û—à–∏–±–∫–∞:', error);

      if (data && data.length > 0) {
        return data[0] as WebBaseRecord;
      }
    }
    
    return null;
  }

  // –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ Chat ID
  static async findByChatId(chatId: string): Promise<WebBaseRecord | null> {
    console.log('üîç –ü–æ–∏—Å–∫ –≤ WebBase —Ç–æ–ª—å–∫–æ –ø–æ Chat ID:', chatId);
    const { data, error } = await supabase
      .from('webbase')
      .select('*')
      .eq('chat_id', chatId);

    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ Chat ID –≤ WebBase:', data, '–û—à–∏–±–∫–∞:', error);

    if (data && data.length > 0) {
      return data[0] as WebBaseRecord;
    }
    
    return null;
  }

  // –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  static async findByPhone(phone: string): Promise<WebBaseRecord | null> {
    const phoneVariants = createPhoneVariants(phone);
    
    for (const phoneVariant of phoneVariants) {
      console.log('üîç –ü–æ–∏—Å–∫ –≤ WebBase —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:', phoneVariant);
      
      const { data, error } = await supabase
        .from('webbase')
        .select('*')
        .eq('phone', phoneVariant);

      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ WebBase:', phoneVariant, ':', data);

      if (data && data.length > 0) {
        return data[0] as WebBaseRecord;
      }
    }
    
    return null;
  }

  // –ü–æ–∏—Å–∫ —Å ILIKE (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
  static async findWithILike(phone: string, chatId: string): Promise<WebBaseRecord | null> {
    const phoneVariants = createPhoneVariants(phone);
    
    console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ WebBase —Å ILIKE...');
    for (const phoneVariant of phoneVariants) {
      const { data, error } = await supabase
        .from('webbase')
        .select('*')
        .ilike('phone', `%${phoneVariant}%`);

      console.log('üîç ILIKE –ø–æ–∏—Å–∫ –≤ WebBase –¥–ª—è:', phoneVariant, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç:', data);

      if (data && data.length > 0) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Chat ID —Å—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
        const matchedRecord = (data as WebBaseRecord[]).find(p => p.chat_id === chatId);
        if (matchedRecord) {
          return matchedRecord;
        }
      }
    }
    
    return null;
  }
}
