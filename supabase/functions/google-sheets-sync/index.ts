
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

Deno.serve(async (req) => {
  console.log('üöÄ Google Sheets Sync function started');

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Initialize Supabase client with service role key (bypasses RLS)
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Get environment variables
    const sheetsId = Deno.env.get('GOOGLE_SHEETS_ID');
    const credentialsJson = Deno.env.get('GOOGLE_SHEETS_CREDENTIALS');

    if (!sheetsId || !credentialsJson) {
      console.error('‚ùå Missing Google Sheets configuration');
      throw new Error('Google Sheets ID –∏–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    console.log('üìã Google Sheets ID:', sheetsId);

    // Parse credentials
    let credentials;
    try {
      credentials = JSON.parse(credentialsJson);
      console.log('‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google');
    }

    // Create JWT token for Google API
    const now = Math.floor(Date.now() / 1000);
    const header = {
      alg: 'RS256',
      typ: 'JWT'
    };

    const payload = {
      iss: credentials.client_email,
      scope: 'https://www.googleapis.com/auth/spreadsheets',
      aud: 'https://oauth2.googleapis.com/token',
      exp: now + 3600,
      iat: now
    };

    // Encode header and payload
    const headerB64 = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
    const payloadB64 = btoa(JSON.stringify(payload)).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');

    // Create signature
    const message = `${headerB64}.${payloadB64}`;
    
    // Process private key - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    let privateKey = credentials.private_key;
    
    // –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    privateKey = privateKey.replace(/\\n/g, '\n');
    privateKey = privateKey.replace(/"/g, '');
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (!privateKey.includes('-----BEGIN')) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫');
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞');
    }

    console.log('üîë –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...');
    
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Web Crypto API
      const pemHeader = '-----BEGIN PRIVATE KEY-----';
      const pemFooter = '-----END PRIVATE KEY-----';
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      const pemContents = privateKey
        .replace(pemHeader, '')
        .replace(pemFooter, '')
        .replace(/\s/g, '');
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
      const binaryDer = Uint8Array.from(atob(pemContents), c => c.charCodeAt(0));

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á
      const keyData = await crypto.subtle.importKey(
        'pkcs8',
        binaryDer.buffer,
        {
          name: 'RSASSA-PKCS1-v1_5',
          hash: 'SHA-256',
        },
        false,
        ['sign']
      );

      console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const signature = await crypto.subtle.sign(
        'RSASSA-PKCS1-v1_5',
        keyData,
        new TextEncoder().encode(message)
      );

      const signatureB64 = btoa(String.fromCharCode(...new Uint8Array(signature)))
        .replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');

      const jwt = `${message}.${signatureB64}`;
      console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');

      // Get access token
      const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=${jwt}`,
      });

      if (!tokenResponse.ok) {
        const errorText = await tokenResponse.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${errorText}`);
      }

      const tokenData = await tokenResponse.json();
      const accessToken = tokenData.access_token;
      console.log('‚úÖ Access token –ø–æ–ª—É—á–µ–Ω');

      // Fetch orders from Supabase (using service role key bypasses RLS)
      const { data: orders, error: ordersError } = await supabase
        .from('tire_orders')
        .select('*')
        .order('created_at', { ascending: false });

      if (ordersError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', ordersError);
        throw ordersError;
      }

      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders?.length || 0}`);

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const getResponse = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${sheetsId}/values/WebBase!A:Z`,
        {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
          },
        }
      );

      let existingData = [];
      if (getResponse.ok) {
        const existingDataResponse = await getResponse.json();
        existingData = existingDataResponse.values || [];
        console.log(`üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${existingData.length}`);
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
      const headers = [
        'ID', '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–æ–º–µ—Ä –∞–≤—Ç–æ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∏–Ω', 
        '–° –¥–∏—Å–∫–∞–º–∏', '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', '–ü–µ—Ä–∏–æ–¥ (–º–µ—Å)', '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', 
        '–¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü', '–û–±—â–∞—è —Å—É–º–º–∞', '–î–æ–ª–≥', '–°—Ç–∞—Ç—É—Å', '–°–∫–ª–∞–¥', 
        '–Ø—á–µ–π–∫–∞', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
      ];

      const orderRows = orders?.map(order => [
        order.id,
        order.client_name || '',
        order.phone || '',
        order.car_number || '',
        order.tire_count || 0,
        order.has_disks ? '–î–∞' : '–ù–µ—Ç',
        order.start_date || '',
        order.storage_period || 0,
        order.end_date || '',
        order.monthly_price || 0,
        order.total_amount || 0,
        order.debt || 0,
        order.deal_status || '',
        order.storage_location || '',
        order.storage_cell || '',
        order.created_at || ''
      ]) || [];

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å
      let dataToWrite = [];
      let newOrdersCount = 0;
      
      if (existingData.length === 0) {
        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã
        dataToWrite = [headers, ...orderRows];
        newOrdersCount = orderRows.length;
        console.log('üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞)');
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const hasHeaders = existingData[0] && existingData[0].includes('ID');
        
        if (!hasHeaders) {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
          dataToWrite = [headers, ...existingData, ...orderRows];
          newOrdersCount = orderRows.length;
          console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ');
        } else {
          // –ü–æ–ª—É—á–∞–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏ (–∏–Ω–¥–µ–∫—Å 0)
          const existingIds = new Set();
          for (let i = 1; i < existingData.length; i++) {
            if (existingData[i] && existingData[i][0]) {
              existingIds.add(existingData[i][0]);
            }
          }

          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
          const newOrderRows = orderRows.filter(row => !existingIds.has(row[0]));
          newOrdersCount = newOrderRows.length;
          
          if (newOrderRows.length > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
            dataToWrite = [...existingData, ...newOrderRows];
            console.log(`üìù –î–æ–±–∞–≤–ª—è–µ–º ${newOrderRows.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º`);
          } else {
            console.log('‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
            return new Response(
              JSON.stringify({ 
                success: true, 
                message: '–í—Å–µ –∑–∞–∫–∞–∑—ã —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
                total_orders: orders?.length || 0,
                new_orders: 0
              }),
              { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
            );
          }
        }
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
      const writeResponse = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${sheetsId}/values/WebBase!A1?valueInputOption=RAW`,
        {
          method: 'PUT',
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            values: dataToWrite
          }),
        }
      );

      if (!writeResponse.ok) {
        const errorText = await writeResponse.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:', errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: ${errorText}`);
      }

      const writeResult = await writeResponse.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Google Sheets');
      console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${writeResult.updatedRows || 0}`);

      return new Response(
        JSON.stringify({ 
          success: true, 
          message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${newOrdersCount}`,
          total_orders: orders?.length || 0,
          new_orders: newOrdersCount,
          updated_rows: writeResult.updatedRows || 0
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );

    } catch (keyError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º:', keyError);
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${keyError.message}`);
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        success: false 
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
